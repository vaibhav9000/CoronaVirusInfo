{"version":3,"sources":["logo.svg","components/image.js","components/block.js","components/data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","image","src","Component","block","num","num_parts","toString","split","replace","join","time","l","length","i","charAt","substring","this","props","obj","des","color","date","convertToDate","number","inCommas","className","id","data","state","err","country","countries","getRequest","bind","buttonHandler","countryName","link","axios","get","then","response","setState","catch","error","console","log","value","document","getElementById","confirmed","recovered","deaths","lastUpdate","onChange","map","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3f994710.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport './image.css'\r\n\r\nclass image extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img src=\"https://www.genengnews.com/wp-content/uploads/2020/02/Feb27_2020_CDC_Coronavirus.jpg\"/>\r\n                <h1>COVID-19</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default image\r\n","import React, { Component } from 'react'\r\nimport './block.css'\r\n\r\nclass block extends Component {\r\n\r\n    inCommas(num){\r\n        var num_parts = num.toString().split(\".\");\r\n        num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        return num_parts.join(\".\");\r\n    }\r\n\r\n    convertToDate(time){\r\n        var date = \"\";\r\n        var l = time.length, i = 0;\r\n        for(i=0; i<l; i++){\r\n            if(time.charAt(i)==='T') break;\r\n        }\r\n        date = time.substring(0, i);\r\n        return date\r\n    }\r\n    render() {\r\n        const {obj, des, time, color} = this.props;\r\n        var date = this.convertToDate(time);\r\n        var number = this.inCommas(obj)\r\n        return (\r\n            <div className=\"block\" id={color}>\r\n                <p>{des[0]}</p>\r\n                <h3>{number}</h3>\r\n                <p id=\"time\">{date}</p>\r\n                <p>{des[1]}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default block\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport './data.css'\r\nimport Block from './block'\r\n\r\nclass data extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             data : null,\r\n             err: null,\r\n             country: 'World',\r\n             countries: null\r\n        }\r\n        this.getRequest = this.getRequest.bind(this);\r\n        this.buttonHandler = this.buttonHandler.bind(this);\r\n    }\r\n\r\n    getRequest(countryName){\r\n        var link = 'https://covid19.mathdro.id/api';\r\n        if(countryName!=''){\r\n            link = link + '/countries/'+countryName\r\n        }\r\n        axios.get(link, true)\r\n          .then(response =>{\r\n              this.setState({\r\n                  data: response.data\r\n              })\r\n          })\r\n          .catch(error =>{\r\n              console.log(error)\r\n              this.setState({\r\n                  err: error\r\n              })\r\n          })\r\n    }\r\n\r\n    buttonHandler(){\r\n        const value = document.getElementById('input').value;\r\n        console.log(value)\r\n        this.getRequest(value)\r\n        this.setState({\r\n            country: value\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        //https://covid19.mathdro.id/api/countries/India\r\n        this.getRequest('')\r\n        var link = 'https://covid19.mathdro.id/api/countries';\r\n        axios.get(link, true)\r\n          .then(response =>{\r\n              this.setState({\r\n                  countries: response.data.countries\r\n              })\r\n              console.log(this.state.countries)\r\n          })\r\n          .catch(error =>{\r\n              console.log(error)\r\n              this.setState({\r\n                  err: error\r\n              })\r\n          })\r\n    }\r\n    \r\n    render() {\r\n        const data = this.state.data;\r\n        const countries = this.state.countries;\r\n        if(data==null || countries==null) {\r\n            return <div>Something Went Wrong</div>\r\n        }\r\n        console.log(data)\r\n        const confirmed =  data.confirmed.value\r\n        const recovered = data.recovered.value\r\n        const deaths = data.deaths.value\r\n        const inf = ['Infected', 'Number of active cases']\r\n        const rec = ['Recovered', 'Number of recovered cases']\r\n        const dea = ['Deaths', 'Number of deaths caused']\r\n        var time = data.lastUpdate\r\n        return (\r\n            <>\r\n            <h2>In {this.state.country}</h2>\r\n            <div className=\"section\">\r\n                <Block obj={confirmed} \r\n                des={inf} time={time} color=\"gray\"/>\r\n                <Block obj={recovered} \r\n                des={rec} time={time} color=\"green\"/>\r\n                <Block obj={deaths} \r\n                des={dea} time={time} color=\"red\"/>\r\n            </div>\r\n            <div>\r\n                <select onChange={this.buttonHandler} id=\"input\">\r\n                    {this.state.countries.map(country => (\r\n                    <option value={country.name}>{country.name}</option>))}\r\n                </select>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default data\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Image from './components/image'\nimport Data from './components/data'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Image/>\n      <Data />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}